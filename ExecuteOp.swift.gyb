@usableFromInline
func TensorGroupExecuteOp(_ op: CTFEOp, _ s: CTFStatus) {
  var count: Int32 = 0
  var unused: CTensorHandle?
  _TFCEagerExecute(op, &unused, &count, s)
  checkOk(s)
}

%for n in range(1, 10 + 1):
@usableFromInline
func TensorGroupExecuteOp<${", ".join(["T" + str(i) + " : TensorGroup" for i in range(n)])}>
  (_ op: CTFEOp, _ s: CTFStatus)
  -> (${", ".join(["T" + str(i) for i in range(n)])}) {

  var count: Int32 = ${" + ".join(["T" + str(i) + "._tensorHandleCount" for i in range(n)])}
  let buffer: UnsafeMutablePointer<CTensorHandle> =
    UnsafeMutablePointer.allocate(capacity: Int(count))
  defer { buffer.deallocate() }
  _TFCEagerExecute(op, UnsafeMutablePointer<CTensorHandle?>(buffer), &count, s)
  checkOk(s)
%for i in range(n):
let off${i}: Int32 = ${"0" if i == 0 else "off" + str(i - 1) + " + T" + str(i - 1) + "._tensorHandleCount"}
%end
  return (${", ".join(["T" + str(i) + ".init(_owning: buffer.advanced(by: Int(off" + str(i) + ")))" for i in range(n)])})
}
%end
